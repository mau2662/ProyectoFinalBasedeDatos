-- ***** CRUD Empleados *****

-- Insertat Empleados

CREATE OR REPLACE PROCEDURE insertar_empleado (
  p_NOMBRE IN EMPLEADO.NOMBRE%TYPE,
  p_APELLIDO IN EMPLEADO.APELLIDO%TYPE,
  p_CORREO IN EMPLEADO.CORREO%TYPE,
  p_TELEFONO IN EMPLEADO.TELEFONO%TYPE,
  p_FECHA_CONTRATACION IN EMPLEADO.FECHA_CONTRATACION%TYPE,
  p_SALARIO IN EMPLEADO.SALARIO%TYPE
) AS
BEGIN
  INSERT INTO EMPLEADO (NOMBRE, APELLIDO, CORREO, TELEFONO, FECHA_CONTRATACION, SALARIO)
  VALUES (p_NOMBRE, p_APELLIDO, p_CORREO, p_TELEFONO, p_FECHA_CONTRATACION, p_SALARIO);
  COMMIT;
END;

-- Ejemplo de como usar

BEGIN
  insertar_empleado('John', 'Doe', 'johndoe@example.com', 1234567890, TO_DATE('2023-03-19', 'YYYY-MM-DD'), 50000);
END;

-- Modificar Empleados

CREATE OR REPLACE PROCEDURE modificar_empleado (
    p_id_empleado IN EMPLEADO.ID_EMPLEADO%TYPE,
    p_nombre IN EMPLEADO.NOMBRE%TYPE DEFAULT NULL,
    p_apellido IN EMPLEADO.APELLIDO%TYPE DEFAULT NULL,
    p_correo IN EMPLEADO.CORREO%TYPE DEFAULT NULL,
    p_telefono IN EMPLEADO.TELEFONO%TYPE DEFAULT NULL,
    p_fecha_contratacion IN EMPLEADO.FECHA_CONTRATACION%TYPE DEFAULT NULL,
    p_salario IN EMPLEADO.SALARIO%TYPE DEFAULT NULL
) AS
BEGIN
    UPDATE EMPLEADO SET
        NOMBRE = NVL(p_nombre, NOMBRE),
        APELLIDO = NVL(p_apellido, APELLIDO),
        CORREO = NVL(p_correo, CORREO),
        TELEFONO = NVL(p_telefono, TELEFONO),
        FECHA_CONTRATACION = NVL(p_fecha_contratacion, FECHA_CONTRATACION),
        SALARIO = NVL(p_salario, SALARIO)
    WHERE ID_EMPLEADO = p_id_empleado;
END;

-- Ejemplo de como usar

BEGIN
  modificar_empleado(1, NULL, NULL, NULL, 5551234, NULL, 7000);
END;
/*
Para actualizar cualquier valor de un empleado solo hay que enviarlo como argumento.
Cualquier cosa que sea NULL no se va a modificar
*/

-- Eliminar Empleados

CREATE OR REPLACE PROCEDURE eliminar_empleado (
    p_id_empleado IN EMPLEADO.ID_EMPLEADO%TYPE
) AS
BEGIN
    DELETE FROM EMPLEADO WHERE ID_EMPLEADO = p_id_empleado;
    COMMIT;
END;

-- Ejemplo de como usar

BEGIN
  eliminar_empleado(1);
END;

-- Select Empleados

CREATE OR REPLACE PROCEDURE select_empleados(
    P_EMPLEADOS OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_EMPLEADOS FOR SELECT * FROM EMPLEADO;
END;

-- Ejemplo de como usar

VAR RC_EMPLEADOS REFCURSOR;
EXEC select_empleados(:RC_EMPLEADOS);
PRINT RC_EMPLEADOS;



-- ***** CRUD CLIENTE *****

-- Insertar Clientes

CREATE OR REPLACE PROCEDURE insertar_cliente (
  p_NOMBRE IN CLIENTE.NOMBRE%TYPE,
  p_APELLIDO IN CLIENTE.APELLIDO%TYPE,
  p_GENERO IN CLIENTE.GENERO%TYPE,
  p_CORREO IN CLIENTE.CORREO%TYPE,
  p_DIRECCION IN CLIENTE.DIRECCION%TYPE,
  p_TELEFONO IN CLIENTE.TELEFONO%TYPE
) AS
BEGIN
  INSERT INTO CLIENTE (NOMBRE, APELLIDO, GENERO, CORREO, DIRECCION, TELEFONO)
  VALUES (p_NOMBRE, p_APELLIDO, p_GENERO, p_CORREO, p_DIRECCION, p_TELEFONO);
  COMMIT;
END;

-- Modificar clientes

CREATE OR REPLACE PROCEDURE modificar_cliente (
    p_ID_CLIENTE IN CLIENTE.ID_CLIENTE%TYPE,
    p_NOMBRE IN CLIENTE.CLIENTE%TYPE DEFAULT NULL,
    p_APELLDO IN CLIENTE.APELLIDO%TYPE DEFAULT NULL,
    p_GENERO IN CLIENTE.GENERO%TYPE DEFAULT NULL,
    p_CORREO IN CLIENTE.CORREO%TYPE DEFAULT NULL,
    p_DIRECCION IN CLIENTE.DIRECCION%TYPE DEFAULT NULL,
    p_TELEFONO IN CLIENTE.TELEFONO%TYPE DEFAULT NULL
) AS
BEGIN
    UPDATE CLIENTE SET
        NOMBRE = NVL(p_NOMBRE, NOMBRE),
        APELLIDO = NVL(p_APELLIDO, APELLIDO),
        GENERO = NVL(p_GENERO, GENERO),
        CORREO = NVL(p_CORREO, CORREO),
        DIRECCION = NVL(p_DIRECCION, DIRECCION),
        TELEFONO = NVL(p_TELEFONO, TELEFONO)
    WHERE ID_CLIENTE = p_ID_CLIENTE;
END;

-- Eliminar Clientes

CREATE OR REPLACE PROCEDURE eliminar_cliente (
    p_ID_CLIENTE IN CLIENTE.ID_CLIENTE%TYPE
) AS
BEGIN
    DELETE FROM CLIENTE WHERE ID_CLIENTE = p_ID_CLIENTE;
    COMMIT;
END;

-- Select Clientes

CREATE OR REPLACE PROCEDURE select_cliente(
    P_CLIENTES OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_CLIENTES FOR SELECT * FROM CLIENTE;
END;

-- ***** CRUD Medicamentos *****

-- Insertar Medicamentos

CREATE OR REPLACE PROCEDURE insertar_medicamento (
  p_NOMBRE IN MEDICAMENTO.NOMBRE%TYPE,
  p_FARMACEUTICA IN MEDICAMENTO.FARMACEUTICA%TYPE,
  p_FECHA_INGRESO IN MEDICAMENTO.FECHA_INGRESO%TYPE,
  p_VENCIMIENTO IN MEDICAMENTO.FECHA_VENCIMIENTO%TYPE
) AS
BEGIN
  INSERT INTO MEDICAMENTO (NOMBRE, FARMACEUTICA, FECHA_INGRESO, FECHA_VENCIMIENTO)
  VALUES (p_NOMBRE, p_FARMACEUTICA, p_FECHA_INGRESO, p_FECHA_VENCIMIENTO);
  COMMIT;
END;

-- Modificar Medicamento

CREATE OR REPLACE PROCEDURE modificar_medicamento (
    p_ID_MEDICAMENTO IN MEDICAMENTO.ID_MEDICAMENTO%TYPE,
    p_NOMBRE IN MEDICAMENTO.NOMBRE%TYPE DEFAULT NULL,
    p_FARMACEUTICA IN MEDICAMENTO.FARMACEUTICA%TYPE DEFAULT NULL,
    p_FECHA_INGRESO IN MEDICAMENTO.FECHA_INGRESO%TYPE DEFAULT NULL,
    p_FECHA_VENCIMIENTO IN MEDICAMENTO.FECHA_VENCIMIENTO%TYPE DEFAULT NULL
) AS
BEGIN
    UPDATE MEDICAMENTO SET
        NOMBRE = NVL(p_NOMBRE, NOMBRE),
        FARMACEUTICA = NVL(p_FARMACEUTICA, FARMACEUTICA),
        FECHA_INGRESO = NVL(p_FECHA_INGRESO, FECHA_INGRESO),
        FECHA_VENCIMIENTO = NVL(p_FECHA_VENCIMIENTO, FECHA_VENCIMIENTO)
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO;
END;

-- Eliminar Medicamento

CREATE OR REPLACE PROCEDURE eliminar_medicamento (
    p_ID_MEDICAMENTO IN MEDICAMENTO.ID_MEDICAMENTO%TYPE
) AS
BEGIN
    DELETE FROM MEDICAMENTO WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO;
    COMMIT;
END;


-- Select Medicamento

CREATE OR REPLACE PROCEDURE select_medicamento(
    P_MEDICAMENTO OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_MEDICAMENTO FOR SELECT * FROM MEDICAMENTO;
END;

-- ***** CRUD Almacen *****

-- Insertar Almacen

CREATE OR REPLACE PROCEDURE insertar_almacen (
  p_NOMBRE_ESTANTE IN ALMACEN.NOMBRE%TYPE,
) AS
BEGIN
  INSERT INTO ALMACEN (NOMBRE_ESTANTE)
  VALUES (p_NOMBRE_ESTANTE);
  COMMIT;
END;

-- Modificar Almacen

CREATE OR REPLACE PROCEDURE modificar_almacen (
    p_ID_ESTANTE IN ALMACEN.ID_ESTANTE%TYPE,
    p_NOMBRE_ESTANTE IN ALMACEN.NOMBRE_ESTANTE%TYPE DEFAULT NULL,
) AS
BEGIN
    UPDATE ALMACEN SET
        NOMBRE_ESTANTE = NVL(p_NOMBRE_ESTANTE, NOMBRE_ESTANTE)
        WHERE ID_ESTANTE = p_ID_ESTANTE;
END;

-- Eliminar Almacen

CREATE OR REPLACE PROCEDURE eliminar_almacen (
    p_ID_ESTANTE IN ALMACEN.ID_ESTANTE%TYPE
) AS
BEGIN
    DELETE FROM ALMACEN WHERE ID_ESTANTE = p_ID_ESTANTE;
    COMMIT;
END;


-- Select Almacen

CREATE OR REPLACE PROCEDURE select_almacen(
    P_ALMACEN OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_ALMACEN FOR SELECT * FROM ALMACEN;
END;


-- ***** CRUD Factura *****

-- Insertar Factura

CREATE OR REPLACE PROCEDURE insertar_factura (
  p_NOMBRE IN FACTURA.NOMBRE%TYPE,
  p_APELLIDO IN FACTURA.APELLIDO%TYPE,
  p_CORREO IN FACTURA.CORREO%TYPE,
  p_DIRECCION IN FACTURA.DIRECCION%TYPE,
  p_TELEFONO IN FACTURA.TELEFONO%TYPE,
  p_PRODUCTOS IN FACTURA.PRODUCTOS%TYPE,
  p_TOTAL IN FACTURA.TOTAL%TYPE
) AS
BEGIN
  INSERT INTO FACTURA (NOMBRE, APELLIDO, CORREO, DIRECCION, TELEFONO, PRODUCTOS, TOTAL)
  VALUES (p_NOMBRE, p_APELLIDO, p_CORREO, p_DIRECCION, p_TELEFONO, p_PRODUCTOS, p_TOTAL);
  COMMIT;
END;

-- Modificar Factura

CREATE OR REPLACE PROCEDURE modificar_factura (
    p_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,
    p_NOMBRE IN FACTURA.NOMBRE%TYPE DEFAULT NULL,
    p_APELLIDO IN FACTURA.APELLIDO%TYPE DEFAULT NULL,
    p_CORREO IN FACTURA.CORREO%TYPE DEFAULT NULL,
    p_DIRECCION IN FACTURA.DIRECCION%TYPE DEFAULT NULL,
    p_TELEFONO IN FACTURA.TELEFONO%TYPE DEFAULT NULL,
    p_PRODUCTOS IN FACTURA.PRODUCTOS%TYPE DEFAULT NULL,
    p_TOTAL IN FACTURA.TOTAL%TYPE DEFAULT NULL
) AS
BEGIN
    UPDATE FACTRA SET
        NOMBRE = NVL(p_NOMBRE, NOMBRE),
        APELLIDO = NVL(p_APELLIDO, APELLIDO),
        CORREO = NVL(p_CORREO, CORREO),
        DIRECCION = NVL(p_DIRECCION, DIRECCION),
        TELEFONO = NVL(p_TELEFONO, TELEFONO),
        PRODUCTOS = NVL(p_PRODUCTOS, PRODUCTOS),
        TOTAL = NVL(p_TOTAL, TOTAL)
    WHERE ID_FACTURA = p_ID_FACTURA;
END;

-- Eliminar Factura

CREATE OR REPLACE PROCEDURE eliminar_factura (
    p_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE
) AS
BEGIN
    DELETE FROM FACTURA WHERE ID_FACTURA = p_ID_FACTURA;
    COMMIT;
END;


-- Select Factura

CREATE OR REPLACE PROCEDURE select_factura(
    P_FACTURA OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_FACTURA FOR SELECT * FROM FACTURA;
END;


-- ***** TRIGGERS *****

-- Eliminar Cliente Trigger

CREATE TRIGGER eliminar_cliente
BEFORE DELETE ON CLIENTE
FOR EACH ROW
DECLARE
  relacionado NUMBER;
BEGIN
  SELECT COUNT (*) INTO relacionado FROM otras_tablas WHERE ID_CLIENTE = :OLD.ID;
  IF relacionado > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'No se puede elimar este cliente debido a que está relacionado con otras tablas');
  END IF;
END


-- Eliminar Medicamento Trigger

CREATE TRIGGER eliminar_medicamento   
BEFORE DELETE ON MEDICAMENTO
FOR EACH ROW
DECLARE
  relacionado NUMBER;
BEGIN
  SELECT COUNT (*) INTO relacionado FROM otras_tablas WHERE ID_MEDICAMENTO = :OLD.ID;
  IF relacionado > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'No se puede elimar este medicamento debido a que está relacionado con otras tablas');
  END IF;
END


-- Eliminar Almacén Trigger

CREATE TRIGGER eliminar_almacen
BEFORE DELETE ON ALMACEN
FOR EACH ROW
DECLARE
  relacionado NUMBER;
BEGIN
  SELECT COUNT (*) INTO relacionado FROM otras_tablas WHERE ID_ESTANTE = :OLD.ID;
  IF relacionado > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'No se puede elimar este almacén debido a que está relacionado con otras tablas');
  END IF;
END


-- Eliminar Factura Trigger

CREATE TRIGGER eliminar_factura
BEFORE DELETE ON FACTURA
FOR EACH ROW
DECLARE
  relacionado NUMBER;
BEGIN
  SELECT COUNT (*) INTO relacionado FROM otras_tablas WHERE ID_FACTURA = :OLD.ID;
  IF relacionado > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'No se puede elimar esta factura debido a que está relacionado con otras tablas');
  END IF;
END
